{
	"version": "0.2.0",
	"configurations": [
		{
			// --- 调试在浏览器中运行的前端代码 ---
			"name": "Launch Chrome against localhost", // 或 "Launch Edge..."
			// 推荐使用 pwa-chrome 或 pwa-msedge
			"type": "chrome",
			// "launch": VS Code 启动一个新的浏览器实例/标签页
			// "attach": VS Code 连接到一个已用 --remote-debugging-port 启动的浏览器实例 (launch 更常用)
			"request": "launch",
			// 你的开发服务器地址
			"url": "http://localhost:3000",
			// !! 关键:指向你的项目根目录 (包含 src, package.json) !!
			"webRoot": "${workspaceFolder}",
			"sourceMaps": true, // 确保开启
			// 设置为 false 或指定一个目录,避免与日常使用的浏览器配置冲突
			"userDataDir": false
			// 如果 VS Code 找不到浏览器,可能需要指定路径:
			// "runtimeExecutable": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" // Windows Chrome 示例
		},
		{
			"name": "Electron: Main",
			"type": "node",
			"request": "launch",
			"runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron",
			"windows": {
				"runtimeExecutable": "${workspaceRoot}/node_modules/.bin/electron.cmd"
			},
			"preLaunchTask": "Start Dev Servers (for Debugging)",
			"args": ["--remote-debugging-port=9223", "./dist/main"],
			"sourceMaps": true, // Enable source maps generated by Rsbuild/tsc
			"cwd": "${workspaceFolder}", // Electron runs from the project root
			"outputCapture": "std", // Show console logs in VS Code Debug Console
			"outFiles": ["${workspaceFolder}/dist/main/*.js"],
			"env": {
				"NODE_ENV": "development"
			},
			"console": "integratedTerminal" // Show output in the integrated terminal
		},
		{
			// --- Configuration for Renderer Process ---
			"name": "Electron: Renderer",
			"type": "chrome", // Use the Chrome debugger
			"request": "launch", // Launch against the URL served by Rsbuild
			// The URL your renderer process loads
			"url": "http://localhost:3000", // Match the port from your rsbuild.config.ts dev server
			"webRoot": "${workspaceFolder}", // Root of your source files
			"sourceMaps": true, // Enable source maps generated by Rsbuild
			// Map URLs served by dev server back to local files
			// Might be needed if webRoot alone isn't sufficient
			// "pathMapping": {
			//   "/": "${workspaceFolder}" // Or "${workspaceFolder}/src/renderer" if more specific
			// },
			// Use a separate profile for debugging to avoid conflicts
			"userDataDir": "${workspaceFolder}/.vscode/chrome-debug-user-data",
			// Electron's renderer uses a specific remote debugging port
			// We need to connect to the one Electron exposes (set via --remote-debugging-port in Main config)
			// "port": 9223, // Match the --remote-debugging-port from the Main config
			// Important: Instead of 'port', for type: 'chrome' 'launch', we often rely on VS Code
			// finding the correct debuggable browser tab based on the URL.
			// Ensure only one instance of your app is running when launching the renderer debugger.
			// Filter ensures we attach to the correct tab if multiple tabs match localhost:3000
			"urlFilter": "http://localhost:3000/*"
			// Optional: Attach to an already running instance (less common for dev server setups)
			// "request": "attach",
			// "port": 9223, // Need to ensure Electron window is open and listening
		}
	],
	"compounds": [
		{
			// --- Compound Configuration to Launch Both ---
			"name": "Electron: All",
			// List the names of the configurations to launch
			"configurations": ["Electron: Main", "Electron: Renderer"],
			// Optional: Run a task before launching (e.g., start dev servers)
			// "preLaunchTask": "npm: dev:debug", // See step 3 below
			"stopAll": true // Stop both debuggers when the compound session stops
		}
	]
}
